package com.sum.backend;

import com.sum.intermediate.ICode;
import com.sum.intermediate.SymTab;
import com.sum.message.Message;
import com.sum.message.MessageHandler;
import com.sum.message.MessageListener;
import com.sum.message.MessageProducer;

/**
 * <h1>Backend</h1>
 * 
 * <p>
 * The framework class that represents the back end component.
 * </p>
 */
public abstract class Backend implements MessageProducer {
	// Message handler delegate.
	protected static MessageHandler messageHandler;
	static {
		messageHandler = new MessageHandler();
	}
	protected SymTab symTab; // symbol table
	protected ICode iCode; // intermediate code

	/**
	 * Process the intermediate code and the symbol table generated by the
	 * parser. To be implemented by a compiler or an interpreter subclass.
	 * 
	 * @param iCode
	 *            the intermediate code.
	 * @param symTab
	 *            the symbol table.
	 * @throws Exception
	 *             if an error occurred.
	 */
	public abstract void process(ICode iCode, SymTab symTab) throws Exception;

	@Override
	public void addMessageListener(MessageListener listener) {
		messageHandler.addListener(listener);
	}

	@Override
	public void removeMessageListener(MessageListener listener) {
		messageHandler.removeListener(listener);
	}

	@Override
	public void sendMessage(Message message) {
		messageHandler.sendMessage(message);
	}
}