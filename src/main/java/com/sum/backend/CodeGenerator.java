package com.sum.backend;

import com.sum.intermediate.ICode;
import com.sum.intermediate.SymTab;
import com.sum.message.Message;
import com.sum.message.MessageListener;
import static com.sum.message.MessageType.*;

public class CodeGenerator extends Backend {
	
	/**
	 * Process the intermediate code and the symbol table generated by the
	 * parser to generate machine-language instructions.
	 * 
	 * @param iCode
	 *            the intermediate code.
	 * @param symTab
	 *            the symbol table.
	 * @throws Exception
	 *             if an error occurred.
	 */
	public void process(ICode iCode, SymTab symTab) throws Exception {
		long startTime = System.currentTimeMillis();
		float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
		int instructionCount = 0;
		// Send the compiler summary message.
		sendMessage(new Message(COMPILER_SUMMARY, new Number[] {
				instructionCount, elapsedTime }));
	}

	@Override
	public void addMessageListener(MessageListener listener) {
		// TODO Auto-generated method stub

	}

	@Override
	public void removeMessageListener(MessageListener listener) {
		// TODO Auto-generated method stub

	}

	@Override
	public void sendMessage(Message message) {
		// TODO Auto-generated method stub

	}

}
